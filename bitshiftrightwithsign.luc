module bitshiftrightwithsign (
    input in[3][8],
    output out[8]
  ) {
  //io_dip[2] = alufn
  // io_dip[1] = first number
  // io_dip [0] = second number
  always {
  out = 00000000;
     if(in[0][2:0] == d0){
    out[7] = in[1][7];
    out[6] = in[1][6];
    out[5] = in[1][5];
    out[4] = in[1][4];
    out[3] = in[1][3];
    out[2] = in[1][2];
    out[1] = in[1][1];
    out[0] = in[1][0];      
    }
    if(in[0][2:0] == d1){
    out[7] = in[1][7];
    out[6] = in[1][7];
    out[5] = in[1][6];
    out[4] = in[1][5];
    out[3] = in[1][4];
    out[2] = in[1][3];
    out[1] = in[1][2];
    out[0] = in[1][1];
      }
    if(in[0][2:0] == d2){
    out[7] = in[1][7];
    out[6] = in[1][7];
    out[5] = in[1][7];
    out[4] = in[1][6];
    out[3] = in[1][5];
    out[2] = in[1][4];
    out[1] = in[1][3];
    out[0] = in[1][2];
      }
    if(in[0][2:0] == d3){
    out[7] = in[1][7];
    out[6] = in[1][7];
    out[5] = in[1][7];
    out[4] = in[1][7];
    out[3] = in[1][6];
    out[2] = in[1][5];
    out[1] = in[1][4];
    out[0] = in[1][3];
      }
    if(in[0][2:0] == d4){
    out[7] = in[1][7];
    out[6] = in[1][7];
    out[5] = in[1][7];
    out[4] = in[1][7];
    out[3] = in[1][7];
    out[2] = in[1][6];
    out[1] = in[1][5];
    out[0] = in[1][4];
      }
    if(in[0][2:0] == d5){
    out[7] = in[1][7];
    out[6] = in[1][7];
    out[5] = in[1][7];
    out[4] = in[1][7];
    out[3] = in[1][7];
    out[2] = in[1][7];
    out[1] = in[1][6];
    out[0] = in[1][5];
      }
    if(in[0][2:0] == d6){
    out[7] = in[1][7];
    out[6] = in[1][7];
    out[5] = in[1][7];
    out[4] = in[1][7];
    out[3] = in[1][7];
    out[2] = in[1][7];
    out[1] = in[1][7];
    out[0] = in[1][6];
      }
    if(in[0][2:0] == d7){
    out[7] = in[1][7];
    out[6] = in[1][7];
    out[5] = in[1][7];
    out[4] = in[1][7];
    out[3] = in[1][7];
    out[2] = in[1][7];
    out[1] = in[1][7];
    out[0] = in[1][7];
    }
  }
}
